const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
require('dotenv').config();

const app = express();

// میدلورهای امنیتی
app.use(helmet());
app.use(cors({
    origin: process.env.ALLOWED_ORIGINS?.split(',') || ['http://localhost:3000'],
    credentials: true
}));

// محدودیت نرخ درخواست
const limiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 دقیقه
    max: 100 // حداکثر 100 درخواست در 15 دقیقه
});
app.use(limiter);

app.use(express.json({ limit: '10mb' }));
app.use(express.static('../frontend'));

// routes
const authRoutes = require('./routes/auth');
const vaultRoutes = require('./routes/vault');
const fileRoutes = require('./routes/files');

app.use('/api/auth', authRoutes);
app.use('/api/vault', vaultRoutes);
app.use('/api/files', fileRoutes);

// route اصلی
app.get('/', (req, res) => {
    res.sendFile('index.html', { root: '../frontend' });
});

// route مدیریت خطا
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).json({ error: 'خطای سرور داخلی' });
});

// اتصال به MongoDB
mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/samsung-vault', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
})
.then(() => console.log('✅ Connected to MongoDB'))
.catch(err => console.error('❌ MongoDB connection error:', err));

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`🚀 Server running on port ${PORT}`);
    console.log(`📁 Frontend: http://localhost:${PORT}`);
});