📁 ساختار کامل پروژه سامسونگ ولت

1. فایل‌های اصلی پروژه

package.json

```json
{
  "name": "samsung-vault-web",
  "version": "1.0.0",
  "description": "Secure Web Vault Application",
  "main": "server.js",
  "scripts": {
    "start": "node backend/server.js",
    "dev": "nodemon backend/server.js",
    "build": "npm install"
  },
  "dependencies": {
    "express": "^4.18.2",
    "mongoose": "^7.5.0",
    "bcryptjs": "^2.4.3",
    "jsonwebtoken": "^9.0.2",
    "crypto": "^1.0.1",
    "multer": "^1.4.5",
    "cors": "^2.8.5",
    "dotenv": "^16.3.1",
    "helmet": "^7.0.0",
    "express-rate-limit": "^6.10.0"
  },
  "devDependencies": {
    "nodemon": "^3.0.1"
  }
}
```

.env

```env
PORT=3000
NODE_ENV=development
JWT_SECRET=your-super-secure-jwt-secret-key-change-in-production
MONGODB_URI=mongodb://localhost:27017/samsung-vault
BCRYPT_SALT_ROUNDS=12
ENCRYPTION_ALGORITHM=aes-256-gcm
ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:5500
```

2. فایل‌های بک‌اند

backend/server.js

```javascript
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
require('dotenv').config();

const app = express();

// میدلورهای امنیتی
app.use(helmet());
app.use(cors({
    origin: process.env.ALLOWED_ORIGINS?.split(',') || ['http://localhost:3000'],
    credentials: true
}));

// محدودیت نرخ درخواست
const limiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 دقیقه
    max: 100 // حداکثر 100 درخواست در 15 دقیقه
});
app.use(limiter);

app.use(express.json({ limit: '10mb' }));
app.use(express.static('../frontend'));

// routes
const authRoutes = require('./routes/auth');
const vaultRoutes = require('./routes/vault');
const fileRoutes = require('./routes/files');

app.use('/api/auth', authRoutes);
app.use('/api/vault', vaultRoutes);
app.use('/api/files', fileRoutes);

// route اصلی
app.get('/', (req, res) => {
    res.sendFile('index.html', { root: '../frontend' });
});

// route مدیریت خطا
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).json({ error: 'خطای سرور داخلی' });
});

// اتصال به MongoDB
mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/samsung-vault', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
})
.then(() => console.log('✅ Connected to MongoDB'))
.catch(err => console.error('❌ MongoDB connection error:', err));

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`🚀 Server running on port ${PORT}`);
    console.log(`📁 Frontend: http://localhost:${PORT}`);
});
```

backend/models/User.js

```javascript
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
    username: {
        type: String,
        required: true,
        unique: true,
        trim: true,
        minlength: 3,
        maxlength: 30
    },
    email: {
        type: String,
        required: true,
        unique: true,
        trim: true,
        lowercase: true
    },
    password: {
        type: String,
        required: true,
        minlength: 6
    },
    masterKeySalt: {
        type: String,
        required: true
    },
    securityLevel: {
        type: String,
        enum: ['low', 'medium', 'high'],
        default: 'medium'
    },
    twoFactorEnabled: {
        type: Boolean,
        default: false
    },
    lastLogin: {
        type: Date
    },
    createdAt: {
        type: Date,
        default: Date.now
    },
    updatedAt: {
        type: Date,
        default: Date.now
    }
});

// آپدیت updatedAt قبل از ذخیره
userSchema.pre('save', function(next) {
    this.updatedAt = Date.now();
    next();
});

module.exports = mongoose.model('User', userSchema);
```

backend/models/VaultItem.js

```javascript
const mongoose = require('mongoose');

const vaultItemSchema = new mongoose.Schema({
    userId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    type: {
        type: String,
        enum: ['password', 'note', 'card', 'file', 'bank'],
        required: true
    },
    title: {
        type: String,
        required: true,
        trim: true
    },
    encryptedData: {
        type: String,
        required: true
    },
    iv: {
        type: String,
        required: true
    },
    authTag: {
        type: String,
        required: true
    },
    category: {
        type: String,
        default: 'general'
    },
    tags: [{
        type: String,
        trim: true
    }],
    favorite: {
        type: Boolean,
        default: false
    },
    createdAt: {
        type: Date,
        default: Date.now
    },
    updatedAt: {
        type: Date,
        default: Date.now
    }
});

// ایندکس برای جستجوی بهتر
vaultItemSchema.index({ userId: 1, type: 1 });
vaultItemSchema.index({ userId: 1, category: 1 });
vaultItemSchema.index({ userId: 1, favorite: 1 });

vaultItemSchema.pre('save', function(next) {
    this.updatedAt = Date.now();
    next();
});

module.exports = mongoose.model('VaultItem', vaultItemSchema);
```

backend/middleware/auth.js (کامل)

```javascript
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');

const JWT_SECRET = process.env.JWT_SECRET;
const SALT_ROUNDS = parseInt(process.env.BCRYPT_SALT_ROUNDS) || 12;

const hashPassword = async (password) => {
    return await bcrypt.hash(password, SALT_ROUNDS);
};

const verifyPassword = async (password, hashedPassword) => {
    return await bcrypt.compare(password, hashedPassword);
};

const generateToken = (userId, username) => {
    return jwt.sign(
        { 
            userId, 
            username,
            iss: 'samsung-vault',
            aud: 'samsung-vault-web'
        },
        JWT_SECRET,
        { expiresIn: '24h' }
    );
};

const verifyToken = (token) => {
    try {
        return jwt.verify(token, JWT_SECRET);
    } catch (error) {
        throw new Error('توکن نامعتبر است');
    }
};

const authenticateToken = (req, res, next) => {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    if (!token) {
        return res.status(401).json({ error: 'دسترسی غیرمجاز. لطفاً وارد شوید.' });
    }

    try {
        const decoded = verifyToken(token);
        req.user = decoded;
        next();
    } catch (error) {
        return res.status(403).json({ error: 'توکن نامعتبر یا منقضی شده است' });
    }
};

module.exports = {
    hashPassword,
    verifyPassword,
    generateToken,
    verifyToken,
    authenticateToken
};
```

backend/middleware/encryption.js (کامل)

```javascript
const crypto = require('crypto');

class EncryptionService {
    constructor() {
        this.algorithm = 'aes-256-gcm';
        this.keyLength = 32;
        this.ivLength = 16;
        this.authTagLength = 16;
    }

    async deriveMasterKey(password, salt) {
        return new Promise((resolve, reject) => {
            crypto.scrypt(password, salt, this.keyLength, (err, derivedKey) => {
                if (err) reject(err);
                resolve(derivedKey);
            });
        });
    }

    generateSalt() {
        return crypto.randomBytes(16).toString('hex');
    }

    generateIV() {
        return crypto.randomBytes(this.ivLength);
    }

    encryptData(data, masterKey) {
        try {
            const iv = this.generateIV();
            const cipher = crypto.createCipher(this.algorithm, masterKey);
            cipher.setAAD(Buffer.from('samsung-vault'));
            
            let encrypted = cipher.update(data, 'utf8', 'hex');
            encrypted += cipher.final('hex');
            
            const authTag = cipher.getAuthTag();
            
            return {
                encryptedData: encrypted,
                iv: iv.toString('hex'),
                authTag: authTag.toString('hex')
            };
        } catch (error) {
            throw new Error('خطا در رمزنگاری داده');
        }
    }

    decryptData(encryptedData, iv, authTag, masterKey) {
        try {
            const decipher = crypto.createDecipher(this.algorithm, masterKey);
            decipher.setAAD(Buffer.from('samsung-vault'));
            decipher.setAuthTag(Buffer.from(authTag, 'hex'));
            
            let decrypted = decipher.update(encryptedData, 'hex', 'utf8');
            decrypted += decipher.final('utf8');
            
            return decrypted;
        } catch (error) {
            throw new Error('خطا در رمزگشایی داده');
        }
    }

    encryptFile(buffer, masterKey) {
        const iv = this.generateIV();
        const cipher = crypto.createCipher(this.algorithm, masterKey);
        
        const encrypted = Buffer.concat([
            cipher.update(buffer),
            cipher.final()
        ]);
        
        const authTag = cipher.getAuthTag();
        
        return {
            encryptedData: encrypted,
            iv: iv,
            authTag: authTag
        };
    }

    generateRandomKey() {
        return crypto.randomBytes(32).toString('hex');
    }
}

module.exports = new EncryptionService();
```

backend/routes/auth.js (کامل)

```javascript
const express = require('express');
const router = express.Router();
const { 
    hashPassword, 
    verifyPassword, 
    generateToken
} = require('../middleware/auth');
const encryptionService = require('../middleware/encryption');
const User = require('../models/User');

router.post('/register', async (req, res) => {
    try {
        const { username, password, email } = req.body;

        if (!username || !password || !email) {
            return res.status(400).json({ 
                error: 'تمامی فیلدها الزامی هستند' 
            });
        }

        const existingUser = await User.findOne({ 
            $or: [{ username }, { email }] 
        });
        
        if (existingUser) {
            return res.status(400).json({ 
                error: 'نام کاربری یا ایمیل قبلاً استفاده شده است' 
            });
        }

        const hashedPassword = await hashPassword(password);
        const masterKeySalt = encryptionService.generateSalt();

        const newUser = new User({
            username,
            email,
            password: hashedPassword,
            masterKeySalt,
            createdAt: new Date()
        });

        await newUser.save();

        const token = generateToken(newUser._id, username);

        res.status(201).json({
            message: 'حساب کاربری با موفقیت ایجاد شد',
            token,
            user: {
                id: newUser._id,
                username: newUser.username,
                email: newUser.email
            },
            masterKeySalt
        });

    } catch (error) {
        console.error('Registration error:', error);
        res.status(500).json({ 
            error: 'خطا در ایجاد حساب کاربری' 
        });
    }
});

router.post('/login', async (req, res) => {
    try {
        const { username, password } = req.body;

        if (!username || !password) {
            return res.status(400).json({ 
                error: 'نام کاربری و رمز عبور الزامی هستند' 
            });
        }

        const user = await User.findOne({ username });
        if (!user) {
            return res.status(401).json({ 
                error: 'نام کاربری یا رمز عبور اشتباه است' 
            });
        }

        const isValidPassword = await verifyPassword(password, user.password);
        if (!isValidPassword) {
            return res.status(401).json({ 
                error: 'نام کاربری یا رمز عبور اشتباه است' 
            });
        }

        user.lastLogin = new Date();
        await user.save();

        const token = generateToken(user._id, username);

        res.json({
            message: 'ورود موفقیت‌آمیز',
            token,
            user: {
                id: user._id,
                username: user.username,
                email: user.email
            },
            masterKeySalt: user.masterKeySalt
        });

    } catch (error) {
        console.error('Login error:', error);
        res.status(500).json({ 
            error: 'خطا در ورود به سیستم' 
        });
    }
});

router.get('/verify', require('../middleware/auth').authenticateToken, (req, res) => {
    res.json({ 
        valid: true, 
        user: req.user 
    });
});

router.post('/change-password', require('../middleware/auth').authenticateToken, async (req, res) => {
    try {
        const { currentPassword, newPassword } = req.body;
        const userId = req.user.userId;

        if (!currentPassword || !newPassword) {
            return res.status(400).json({ 
                error: 'رمز عبور فعلی و جدید الزامی هستند' 
            });
        }

        const user = await User.findById(userId);
        if (!user) {
            return res.status(404).json({ error: 'کاربر یافت نشد' });
        }

        const isValid = await verifyPassword(currentPassword, user.password);
        if (!isValid) {
            return res.status(401).json({ error: 'رمز عبور فعلی اشتباه است' });
        }

        user.password = await hashPassword(newPassword);
        user.masterKeySalt = encryptionService.generateSalt();
        await user.save();

        res.json({ 
            message: 'رمز عبور با موفقیت تغییر یافت',
            newMasterKeySalt: user.masterKeySalt
        });

    } catch (error) {
        console.error('Change password error:', error);
        res.status(500).json({ error: 'خطا در تغییر رمز عبور' });
    }
});

module.exports = router;
```

backend/routes/vault.js

```javascript
const express = require('express');
const router = express.Router();
const { authenticateToken } = require('../middleware/auth');
const encryptionService = require('../middleware/encryption');
const VaultItem = require('../models/VaultItem');

// دریافت تمام آیتم‌های کاربر
router.get('/items', authenticateToken, async (req, res) => {
    try {
        const userId = req.user.userId;
        const { type, category, favorite } = req.query;
        
        let filter = { userId };
        
        if (type) filter.type = type;
        if (category) filter.category = category;
        if (favorite !== undefined) filter.favorite = favorite === 'true';
        
        const items = await VaultItem.find(filter)
            .sort({ createdAt: -1 })
            .select('title type category tags favorite createdAt updatedAt');
        
        res.json({
            items,
            count: items.length
        });
        
    } catch (error) {
        console.error('Get items error:', error);
        res.status(500).json({ error: 'خطا در دریافت آیتم‌ها' });
    }
});

// افزودن آیتم جدید
router.post('/items', authenticateToken, async (req, res) => {
    try {
        const userId = req.user.userId;
        const { type, title, data, category, tags, favorite } = req.body;
        
        if (!type || !title || !data) {
            return res.status(400).json({ 
                error: 'نوع، عنوان و داده آیتم الزامی هستند' 
            });
        }

        // در اینجا masterKey باید از کلاینت دریافت شود
        // این یک پیاده‌سازی ساده است
        const masterKey = req.headers['x-master-key'] || 'default-key';
        
        const encryptedData = encryptionService.encryptData(
            JSON.stringify(data), 
            Buffer.from(masterKey, 'hex')
        );
        
        const newItem = new VaultItem({
            userId,
            type,
            title,
            encryptedData: encryptedData.encryptedData,
            iv: encryptedData.iv,
            authTag: encryptedData.authTag,
            category: category || 'general',
            tags: tags || [],
            favorite: favorite || false
        });
        
        await newItem.save();
        
        res.status(201).json({
            message: 'آیتم با موفقیت ذخیره شد',
            item: {
                id: newItem._id,
                title: newItem.title,
                type: newItem.type,
                category: newItem.category,
                favorite: newItem.favorite,
                createdAt: newItem.createdAt
            }
        });
        
    } catch (error) {
        console.error('Add item error:', error);
        res.status(500).json({ error: 'خطا در ذخیره آیتم' });
    }
});

// دریافت یک آیتم خاص
router.get('/items/:id', authenticateToken, async (req, res) => {
    try {
        const userId = req.user.userId;
        const itemId = req.params.id;
        
        const item = await VaultItem.findOne({ _id: itemId, userId });
        
        if (!item) {
            return res.status(404).json({ error: 'آیتم یافت نشد' });
        }
        
        // برای نمایش اطلاعات پایه بدون رمزگشایی
        res.json({
            item: {
                id: item._id,
                title: item.title,
                type: item.type,
                category: item.category,
                tags: item.tags,
                favorite: item.favorite,
                createdAt: item.createdAt,
                updatedAt: item.updatedAt
            }
        });
        
    } catch (error) {
        console.error('Get item error:', error);
        res.status(500).json({ error: 'خطا در دریافت آیتم' });
    }
});

// آپدیت آیتم
router.put('/items/:id', authenticateToken, async (req, res) => {
    try {
        const userId = req.user.userId;
        const itemId = req.params.id;
        const { title, data, category, tags, favorite } = req.body;
        
        const item = await VaultItem.findOne({ _id: itemId, userId });
        
        if (!item) {
            return res.status(404).json({ error: 'آیتم یافت نشد' });
        }
        
        if (title) item.title = title;
        if (category) item.category = category;
        if (tags) item.tags = tags;
        if (favorite !== undefined) item.favorite = favorite;
        
        if (data) {
            const masterKey = req.headers['x-master-key'] || 'default-key';
            const encryptedData = encryptionService.encryptData(
                JSON.stringify(data), 
                Buffer.from(masterKey, 'hex')
            );
            
            item.encryptedData = encryptedData.encryptedData;
            item.iv = encryptedData.iv;
            item.authTag = encryptedData.authTag;
        }
        
        await item.save();
        
        res.json({
            message: 'آیتم با موفقیت به‌روزرسانی شد',
            item: {
                id: item._id,
                title: item.title,
                type: item.type,
                category: item.category,
                favorite: item.favorite,
                updatedAt: item.updatedAt
            }
        });
        
    } catch (error) {
        console.error('Update item error:', error);
        res.status(500).json({ error: 'خطا در به‌روزرسانی آیتم' });
    }
});

// حذف آیتم
router.delete('/items/:id', authenticateToken, async (req, res) => {
    try {
        const userId = req.user.userId;
        const itemId = req.params.id;
        
        const item = await VaultItem.findOneAndDelete({ _id: itemId, userId });
        
        if (!item) {
            return res.status(404).json({ error: 'آیتم یافت نشد' });
        }
        
        res.json({ 
            message: 'آیتم با موفقیت حذف شد' 
        });
        
    } catch (error) {
        console.error('Delete item error:', error);
        res.status(500).json({ error: 'خطا در حذف آیتم' });
    }
});

// جستجو در آیتم‌ها
router.get('/search', authenticateToken, async (req, res) => {
    try {
        const userId = req.user.userId;
        const { q } = req.query;
        
        if (!q) {
            return res.status(400).json({ error: 'عبارت جستجو الزامی است' });
        }
        
        const items = await VaultItem.find({
            userId,
            $or: [
                { title: { $regex: q, $options: 'i' } },
                { category: { $regex: q, $options: 'i' } },
                { tags: { $in: [new RegExp(q, 'i')] } }
            ]
        }).select('title type category tags favorite createdAt');
        
        res.json({
            items,
            count: items.length
        });
        
    } catch (error) {
        console.error('Search error:', error);
        res.status(500).json({ error: 'خطا در جستجو' });
    }
});

module.exports = router;
```

backend/routes/files.js

```javascript
const express = require('express');
const router = express.Router();
const multer = require('multer');
const { authenticateToken } = require('../middleware/auth');
const encryptionService = require('../middleware/encryption');
const VaultItem = require('../models/VaultItem');

// تنظیم multer برای آپلود فایل
const storage = multer.memoryStorage();
const upload = multer({
    storage: storage,
    limits: {
        fileSize: 10 * 1024 * 1024 // 10MB
    },
    fileFilter: (req, file, cb) => {
        // بررسی نوع فایل
        const allowedTypes = [
            'image/jpeg', 'image/png', 'image/gif',
            'application/pdf',
            'text/plain',
            'application/msword',
            'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
        ];
        
        if (allowedTypes.includes(file.mimetype)) {
            cb(null, true);
        } else {
            cb(new Error('نوع فایل مجاز نیست'), false);
        }
    }
});

// آپلود فایل
router.post('/upload', authenticateToken, upload.single('file'), async (req, res) => {
    try {
        if (!req.file) {
            return res.status(400).json({ error: 'فایلی انتخاب نشده است' });
        }

        const userId = req.user.userId;
        const { title, category } = req.body;
        
        const masterKey = req.headers['x-master-key'] || 'default-key';
        
        // رمزنگاری فایل
        const encryptedFile = encryptionService.encryptFile(
            req.file.buffer, 
            Buffer.from(masterKey, 'hex')
        );
        
        const newFileItem = new VaultItem({
            userId,
            type: 'file',
            title: title || req.file.originalname,
            encryptedData: encryptedFile.encryptedData.toString('base64'),
            iv: encryptedFile.iv.toString('hex'),
            authTag: encryptedFile.authTag.toString('hex'),
            category: category || 'files',
            tags: ['file', req.file.mimetype]
        });
        
        await newFileItem.save();
        
        res.json({
            message: 'فایل با موفقیت آپلود شد',
            file: {
                id: newFileItem._id,
                title: newFileItem.title,
                size: req.file.size,
                mimetype: req.file.mimetype,
                createdAt: newFileItem.createdAt
            }
        });
        
    } catch (error) {
        console.error('File upload error:', error);
        res.status(500).json({ error: 'خطا در آپلود فایل' });
    }
});

// دریافت فایل
router.get('/download/:id', authenticateToken, async (req, res) => {
    try {
        const userId = req.user.userId;
        const fileId = req.params.id;
        
        const fileItem = await VaultItem.findOne({ _id: fileId, userId, type: 'file' });
        
        if (!fileItem) {
            return res.status(404).json({ error: 'فایل یافت نشد' });
        }
        
        // در اینجا باید رمزگشایی انجام شود
        // این یک پیاده‌سازی ساده است
        
        res.json({
            message: 'اطلاعات فایل',
            file: {
                id: fileItem._id,
                title: fileItem.title,
                createdAt: fileItem.createdAt
            }
        });
        
    } catch (error) {
        console.error('File download error:', error);
        res.status(500).json({ error: 'خطا در دریافت فایل' });
    }
});

module.exports = router;
```

3. فایل‌های فرانت‌اند

frontend/index.html

```html
<!DOCTYPE html>
<html lang="fa" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>سامسونگ ولت - Samsung Vault</title>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/responsive.css">
</head>
<body>
    <!-- صفحه لاگین -->
    <div id="loginPage" class="page active">
        <div class="login-container">
            <div class="logo">
                <h1>🔒 سامسونگ ولت</h1>
                <p>محفظه امن دیجیتال شما</p>
            </div>
            
            <div class="auth-tabs">
                <button class="auth-tab active" data-tab="login">ورود</button>
                <button class="auth-tab" data-tab="register">ثبت نام</button>
            </div>
            
            <!-- فرم لاگین -->
            <form id="loginForm" class="auth-form active">
                <div class="form-group">
                    <input type="text" id="loginUsername" placeholder="نام کاربری" required>
                </div>
                <div class="form-group">
                    <input type="password" id="loginPassword" placeholder="رمز عبور" required>
                </div>
                <button type="submit" class="btn-primary">ورود به سیستم</button>
            </form>
            
            <!-- فرم ثبت نام -->
            <form id="registerForm" class="auth-form">
                <div class="form-group">
                    <input type="text" id="registerUsername" placeholder="نام کاربری" required>
                </div>
                <div class="form-group">
                    <input type="email" id="registerEmail" placeholder="ایمیل" required>
                </div>
                <div class="form-group">
                    <input type="password" id="registerPassword" placeholder="رمز عبور" required>
                    <small>رمز عبور باید حداقل ۶ کاراکتر باشد</small>
                </div>
                <div class="form-group">
                    <input type="password" id="registerConfirmPassword" placeholder="تکرار رمز عبور" required>
                </div>
                <button type="submit" class="btn-primary">ایجاد حساب کاربری</button>
            </form>
            
            <div class="security-notice">
                <p>🔐 اطلاعات شما با بالاترین سطح امنیتی محافظت می‌شود</p>
            </div>
        </div>
    </div>

    <!-- صفحه اصلی -->
    <div id="mainPage" class="page">
        <header class="header">
            <div class="header-left">
                <h2>🔒 محفظه امن من</h2>
            </div>
            <div class="header-right">
                <span id="userWelcome">خوش آمدید!</span>
                <button id="logoutBtn" class="btn-logout">خروج</button>
            </div>
        </header>
        
        <div class="vault-container">
            <!-- نوار کناری -->
            <div class="sidebar">
                <div class="sidebar-section">
                    <h3>دسته‌بندی‌ها</h3>
                    <button class="tab-btn active" data-tab="passwords">
                        <span>🔑</span>
                        <span>رمزهای عبور</span>
                    </button>
                    <button class="tab-btn" data-tab="files">
                        <span>📁</span>
                        <span>فایل‌ها</span>
                    </button>
                    <button class="tab-btn" data-tab="notes">
                        <span>📝</span>
                        <span>یادداشت‌ها</span>
                    </button>
                    <button class="tab-btn" data-tab="cards">
                        <span>💳</span>
                        <span>کارت‌ها</span>
                    </button>
                </div>
                
                <div class="sidebar-section">
                    <h3>مدیریت</h3>
                    <button class="sidebar-menu" data-action="search">
                        <span>🔍</span>
                        <span>جستجو</span>
                    </button>
                    <button class="sidebar-menu" data-action="favorites">
                        <span>⭐</span>
                        <span>مورد علاقه‌ها</span>
                    </button>
                    <button class="sidebar-menu" data-action="settings">
                        <span>⚙️</span>
                        <span>تنظیمات</span>
                    </button>
                </div>
            </div>
            
            <!-- محتوای اصلی -->
            <div class="content">
                <!-- تب رمزهای عبور -->
                <div id="passwordsTab" class="tab-content active">
                    <div class="content-header">
                        <h3>رمزهای عبور</h3>
                        <button id="addPasswordBtn" class="btn-primary">
                            <span>+</span>
                            افزودن رمز عبور
                        </button>
                    </div>
                    <div id="passwordsList" class="items-list">
                        <!-- لیست رمزهای عبور اینجا نمایش داده می‌شود -->
                    </div>
                </div>
                
                <!-- تب فایل‌ها -->
                <div id="filesTab" class="tab-content">
                    <div class="content-header">
                        <h3>فایل‌های امن</h3>
                        <div class="file-actions">
                            <input type="file" id="fileUpload" multiple style="display: none;">
                            <button id="uploadFileBtn" class="btn-primary">
                                <span>📁</span>
                                آپلود فایل
                            </button>
                        </div>
                    </div>
                    <div id="filesList" class="items-list">
                        <!-- لیست فایل‌ها اینجا نمایش داده می‌شود -->
                    </div>
                </div>
                
                <!-- تب یادداشت‌ها -->
                <div id="notesTab" class="tab-content">
                    <div class="content-header">
                        <h3>یادداشت‌های امن</h3>
                        <button id="addNoteBtn" class="btn-primary">
                            <span>+</span>
                            یادداشت جدید
                        </button>
                    </div>
                    <div id="notesList" class="items-list">
                        <!-- لیست یادداشت‌ها اینجا نمایش داده می‌شود -->
                    </div>
                </div>
                
                <!-- تب کارت‌ها -->
                <div id="cardsTab" class="tab-content">
                    <div class="content-header">
                        <h3>کارت‌های بانکی</h3>
                        <button id="addCardBtn" class="btn-primary">
                            <span>+</span>
                            افزودن کارت
                        </button>
                    </div>
                    <div id="cardsList" class="items-list">
                        <!-- لیست کارت‌ها اینجا نمایش داده می‌شود -->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- مودال‌ها -->
    <div id="modalOverlay" class="modal-overlay">
        <div class="modal">
            <div class="modal-header">
                <h3 id="modalTitle">عنوان مودال</h3>
                <button class="modal-close">&times;</button>
            </div>
            <div class="modal-body" id="modalBody">
                <!-- محتوای مودال -->
            </div>
        </div>
    </div>

    <!-- اسکریپت‌ها -->
    <script src="js/auth.js"></script>
    <script src="js/crypto.js"></script>
    <script src="js/vault.js"></script>
    <script src="js/app.js"></script>
</body>
</html>
```

frontend/css/style.css

```css
/* Reset و تنظیمات پایه */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: #333;
    line-height: 1.6;
    min-height: 100vh;
}

/* صفحات */
.page {
    display: none;
    min-height: 100vh;
}

.page.active {
    display: block;
}

/* کانتینر لاگین */
.login-container {
    max-width: 400px;
    margin: 100px auto;
    background: white;
    padding: 40px;
    border-radius: 20px;
    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
    text-align: center;
}

.logo h1 {
    color: #333;
    margin-bottom: 10px;
    font-size: 28px;
}

.logo p {
    color: #666;
    margin-bottom: 30px;
}

/* تب‌های احراز هویت */
.auth-tabs {
    display: flex;
    margin-bottom: 30px;
    border-bottom: 2px solid #eee;
}

.auth-tab {
    flex: 1;
    padding: 15px;
    background: none;
    border: none;
    cursor: pointer;
    font-size: 16px;
    color: #666;
    transition: all 0.3s ease;
}

.auth-tab.active {
    color: #667eea;
    border-bottom: 3px solid #667eea;
}

/* فرم‌ها */
.auth-form {
    display: none;
    text-align: right;
}

.auth-form.active {
    display: block;
}

.form-group {
    margin-bottom: 20px;
    text-align: right;
}

.form-group input {
    width: 100%;
    padding: 15px;
    border: 2px solid #eee;
    border-radius: 10px;
    font-size: 16px;
    transition: border-color 0.3s ease;
}

.form-group input:focus {
    outline: none;
    border-color: #667eea;
}

.form-group small {
    display: block;
    margin-top: 5px;
    color: #666;
    font-size: 12px;
}

/* دکمه‌ها */
.btn-primary {
    width: 100%;
    padding: 15px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border: none;
    border-radius: 10px;
    font-size: 16px;
    cursor: pointer;
    transition: transform 0.3s ease;
}

.btn-primary:hover {
    transform: translateY(-2px);
}

.btn-logout {
    padding: 8px 16px;
    background: #ff4757;
    color: white;
    border: none;
    border-radius: 6px;
    cursor: pointer;
}

/* هدر */
.header {
    background: white;
    padding: 20px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.header h2 {
    color: #333;
}

/* کانتینر اصلی */
.vault-container {
    display: flex;
    min-height: calc(100vh - 80px);
}

/* نوار کناری */
.sidebar {
    width: 250px;
    background: #2c3e50;
    color: white;
    padding: 20px 0;
}

.sidebar-section {
    margin-bottom: 30px;
}

.sidebar-section h3 {
    padding: 0 20px 15px;
    font-size: 14px;
    color: #ecf0f1;
    border-bottom: 1px solid #34495e;
}

.tab-btn, .sidebar-menu {
    width: 100%;
    padding: 15px 20px;
    background: none;
    border: none;
    color: #bdc3c7;
    text-align: right;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 10px;
}

.tab-btn:hover, .sidebar-menu:hover {
    background: #34495e;
    color: white;
}

.tab-btn.active {
    background: #3498db;
    color: white;
}

/* محتوای اصلی */
.content {
    flex: 1;
    padding: 30px;
    background: #f8f9fa;
}

.content-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
}

.content-header h3 {
    color: #2c3e50;
    font-size: 24px;
}

/* لیست آیتم‌ها */
.items-list {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 20px;
}

.item-card {
    background: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease;
}

.item-card:hover {
    transform: translateY(-5px);
}

.item-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
}

.item-title {
    font-weight: bold;
    color: #2c3e50;
}

.item-actions {
    display: flex;
    gap: 10px;
}

.btn-icon {
    background: none;
    border: none;
    cursor: pointer;
    padding: 5px;
    border-radius: 4px;
    transition: background 0.3s ease;
}

.btn-icon:hover {
    background: #ecf0f1;
}

/* مودال */
.modal-overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    z-index: 1000;
    align-items: center;
    justify-content: center;
}

.modal-overlay.active {
    display: flex;
}

.modal {
    background: white;
    border-radius: 15px;
    width: 90%;
    max-width: 500px;
    max-height: 90vh;
    overflow-y: auto;
}

.modal-header {
    padding: 20px;
    border-bottom: 1px solid #eee;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.modal-close {
    background: none;
    border: none;
    font-size: 24px;
    cursor: pointer;
    color: #666;
}

.modal-body {
    padding: 20px;
}

/* نوتیفیکیشن امنیتی */
.security-notice {
    margin-top: 20px;
    padding: 15px;
    background: #e8f5e8;
    border: 1px solid #4caf50;
    border-radius: 8px;
    color: #2e7d32;
}

/* حالت ریسپانسیو */
@media (max-width: 768px) {
    .vault-container {
        flex-direction: column;
    }
    
    .sidebar {
        width: 100%;
        order: 2;
    }
    
    .content {
        order: 1;
    }
    
    .login-container {
        margin: 50px 20px;
        padding: 30px 20px;
    }
    
    .items-list {
        grid-template-columns: 1fr;
    }
}
```

frontend/css/responsive.css

```css
/* استایل‌های ریسپانسیو */

@media (max-width: 1200px) {
    .items-list {
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    }
}

@media (max-width: 768px) {
    .header {
        flex-direction: column;
        gap: 15px;
        text-align: center;
    }
    
    .header-right {
        display: flex;
        flex-direction: column;
        gap: 10px;
        align-items: center;
    }
    
    .content-header {
        flex-direction: column;
        gap: 15px;
        text-align: center;
    }
    
    .sidebar {
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        height: auto;
        z-index: 100;
        padding: 10px 0;
    }
    
    .sidebar-section {
        margin-bottom: 0;
        display: none;
    }
    
    .sidebar-section:first-child {
        display: block;
    }
    
    .tab-btn {
        padding: 12px 15px;
        font-size: 14px;
    }
    
    .content {
        padding: 20px 15px;
        margin-bottom: 70px;
    }
    
    .modal {
        width: 95%;
        margin: 20px;
    }
}

@media (max-width: 480px) {
    .login-container {
        margin: 20px 10px;
        padding: 20px 15px;
    }
    
    .logo h1 {
        font-size: 24px;
    }
    
    .auth-tab {
        padding: 12px;
        font-size: 14px;
    }
    
    .form-group input {
        padding: 12px;
    }
    
    .btn-primary {
        padding: 12px;
    }
    
    .item-card {
        padding: 15px;
    }
    
    .modal-body {
        padding: 15px;
    }
}

/* حالت تبلت */
@media (min-width: 769px) and (max-width: 1024px) {
    .sidebar {
        width: 200px;
    }
    
    .content {
        padding: 20px;
    }
    
    .items-list {
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    }
}

/* حالت لنداسکیپ موبایل */
@media (max-height: 500px) and (orientation: landscape) {
    .login-container {
        margin: 20px auto;
        padding: 20px;
    }
    
    .logo {
        margin-bottom: 15px;
    }
    
    .logo h1 {
        font-size: 24px;
        margin-bottom: 5px;
    }
    
    .form-group {
        margin-bottom: 15px;
    }
    
    .form-group input {
        padding: 10px;
    }
}

/* پشتیبانی از حالت تاریک */
@media (prefers-color-scheme: dark) {
    body {
        background: linear-gradient(135deg, #2c3e50 0%, #3498db 100%);
    }
    
    .login-container {
        background: #34495e;
        color: #ecf0f1;
    }
    
    .logo h1 {
        color: #ecf0f1;
    }
    
    .form-group input {
        background: #2c3e50;
        border-color: #34495e;
        color: #ecf0f1;
    }
    
    .form-group input:focus {
        border-color: #3498db;
    }
}

/* انیمیشن‌ها */
@keyframes fadeIn {
    from {
        opacity: 0;
        transform: translateY(20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.page.active {
    animation: fadeIn 0.5s ease;
}

.item-card {
    animation: fadeIn 0.3s ease;
}

/* اسکرول بار سفارشی */
::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: #c1c1c1;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: #a8a8a8;
}
```

frontend/js/auth.js

```javascript
class AuthManager {
    constructor() {
        this.token = localStorage.getItem('samsung_vault_token');
        this.user = JSON.parse(localStorage.getItem('samsung_vault_user') || 'null');
        this.masterKeySalt = localStorage.getItem('samsung_vault_salt');
        this.baseURL = window.location.origin + '/api';
        
        this.initializeEventListeners();
        this.checkAuthStatus();
    }

    initializeEventListeners() {
        // تب‌های لاگین/ثبت نام
        document.querySelectorAll('.auth-tab').forEach(tab => {
            tab.addEventListener('click', (e) => {
                this.switchAuthTab(e.target.dataset.tab);
            });
        });

        // فرم لاگین
        document.getElementById('loginForm').addEventListener('submit', (e) => {
            e.preventDefault();
            this.handleLogin();
        });

        // فرم ثبت نام
        document.getElementById('registerForm').addEventListener('submit', (e) => {
            e.preventDefault();
            this.handleRegister();
        });

        // دکمه خروج
        document.getElementById('logoutBtn').addEventListener('click', () => {
            this.logout();
        });
    }

    switchAuthTab(tab) {
        // غیرفعال کردن همه تب‌ها
        document.querySelectorAll('.auth-tab').forEach(t => {
            t.classList.remove('active');
        });
        document.querySelectorAll('.auth-form').forEach(f => {
            f.classList.remove('active');
        });

        // فعال کردن تب انتخاب شده
        document.querySelector(`[data-tab="${tab}"]`).classList.add('active');
        document.getElementById(`${tab}Form`).classList.add('active');
    }

    async handleLogin() {
        const username = document.getElementById('loginUsername').value;
        const password = document.getElementById('loginPassword').value;

        try {
            const result = await this.login(username, password);
            this.showNotification('ورود موفقیت‌آمیز بود!', 'success');
            this.showMainPage();
        } catch (error) {
            this.showNotification(error.message, 'error');
        }
    }

    async handleRegister() {
        const username = document.getElementById('registerUsername').value;
        const email = document.getElementById('registerEmail').value;
        const password = document.getElementById('registerPassword').value;
        const confirmPassword = document.getElementById('registerConfirmPassword').value;

        if (password !== confirmPassword) {
            this.showNotification('رمزهای عبور مطابقت ندارند', 'error');
            return;
        }

        if (password.length < 6) {
            this.showNotification('رمز عبور باید حداقل ۶ کاراکتر باشد', 'error');
            return;
        }

        try {
            const result = await this.register(username, password, email);
            this.showNotification('حساب کاربری با موفقیت ایجاد شد!', 'success');
            this.showMainPage();
        } catch (error) {
            this.showNotification(error.message, 'error');
        }
    }

    async login(username, password) {
        try {
            const response = await fetch(`${this.baseURL}/auth/login`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ username, password })
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.error || 'خطا در ورود');
            }

            this.token = data.token;
            this.user = data.user;
            this.masterKeySalt = data.masterKeySalt;

            // ذخیره در localStorage
            localStorage.setItem('samsung_vault_token', this.token);
            localStorage.setItem('samsung_vault_user', JSON.stringify(this.user));
            localStorage.setItem('samsung_vault_salt', this.masterKeySalt);

            return data;

        } catch (error) {
            throw error;
        }
    }

    async register(username, password, email) {
        try {
            const response = await fetch(`${this.baseURL}/auth/register`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ username, password, email })
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.error || 'خطا در ثبت نام');
            }

            this.token = data.token;
            this.user = data.user;
            this.masterKeySalt = data.masterKeySalt;

            localStorage.setItem('samsung_vault_token', this.token);
            localStorage.setItem('samsung_vault_user', JSON.stringify(this.user));
            localStorage.setItem('samsung_vault_salt', this.masterKeySalt);

            return data;

        } catch (error) {
            throw error;
        }
    }

    logout() {
        this.token = null;
        this.user = null;
        this.masterKeySalt = null;
        
        localStorage.removeItem('samsung_vault_token');
        localStorage.removeItem('samsung_vault_user');
        localStorage.removeItem('samsung_vault_salt');
        
        this.showLoginPage();
    }

    async verifyToken() {
        if (!this.token) return false;

        try {
            const response = await fetch(`${this.baseURL}/auth/verify`, {
                headers: this.getHeaders()
            });

            return response.ok;
        } catch (error) {
            return false;
        }
    }

    async checkAuthStatus() {
        if (this.token && this.user) {
            const isValid = await this.verifyToken();
            if (isValid) {
                this.showMainPage();
            } else {
                this.logout();
            }
        } else {
            this.showLoginPage();
        }
    }

    showLoginPage() {
        document.getElementById('loginPage').classList.add('active');
        document.getElementById('mainPage').classList.remove('active');
        
        // ریست فرم‌ها
        document.getElementById('loginForm').reset();
        document.getElementById('registerForm').reset();
    }

    showMainPage() {
        document.getElementById('loginPage').classList.remove('active');
        document.getElementById('mainPage').classList.add('active');
        
        // نمایش نام کاربری
        document.getElementById('userWelcome').textContent = 
            `خوش آمدید، ${this.user.username}!`;
    }

    getHeaders() {
        return {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${this.token}`
        };
    }

    showNotification(message, type = 'info') {
        // ایجاد نوتیفیکیشن
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.textContent = message;
        
        // استایل نوتیفیکیشن
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            padding: 15px 20px;
            border-radius: 8px;
            color: white;
            z-index: 10000;
            font-weight: bold;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        `;
        
        if (type === 'success') {
            notification.style.background = '#27ae60';
        } else if (type === 'error') {
            notification.style.background = '#e74c3c';
        } else {
            notification.style.background = '#3498db';
        }
        
        document.body.appendChild(notification);
        
        // حذف خودکار بعد از 3 ثانیه
        setTimeout(() => {
            notification.remove();
        }, 3000);
    }
}

// ایجاد نمونه از AuthManager
const authManager = new AuthManager();
```

frontend/js/crypto.js

```javascript
class ClientCrypto {
    constructor() {
        this.masterKey = null;
    }

    async deriveMasterKey(password, salt) {
        try {
            const encoder = new TextEncoder();
            const keyMaterial = await crypto.subtle.importKey(
                'raw',
                encoder.encode(password),
                'PBKDF2',
                false,
                ['deriveBits', 'deriveKey']
            );

            const key = await crypto.subtle.deriveKey(
                {
                    name: 'PBKDF2',
                    salt: encoder.encode(salt),
                    iterations: 100000,
                    hash: 'SHA-256'
                },
                keyMaterial,
                { name: 'AES-GCM', length: 256 },
                false,
                ['encrypt', 'decrypt']
            );

            this.masterKey = key;
            return key;
        } catch (error) {
            console.error('Error deriving master key:', error);
            throw new Error('خطا در تولید کلید اصلی');
        }
    }

    async encryptData(data) {
        if (!this.masterKey) {
            throw new Error('کلید اصلی تنظیم نشده است');
        }

        try {
            const encoder = new TextEncoder();
            const iv = crypto.getRandomValues(new Uint8Array(12));
            
            const encryptedData = await crypto.subtle.encrypt(
                {
                    name: 'AES-GCM',
                    iv: iv,
                    additionalData: encoder.encode('samsung-vault')
                },
                this.masterKey,
                encoder.encode(data)
            );

            return {
                encryptedData: Array.from(new Uint8Array(encryptedData)),
                iv: Array.from(iv)
            };
        } catch (error) {
            console.error('Encryption error:', error);
            throw new Error('خطا در رمزنگاری داده');
        }
    }

    async decryptData(encryptedData, iv) {
        if (!this.masterKey) {
            throw new Error('کلید اصلی تنظیم نشده است');
        }

        try {
            const decoder = new TextDecoder();
            const encoder = new TextEncoder();

            const decryptedData = await crypto.subtle.decrypt(
                {
                    name: 'AES-GCM',
                    iv: new Uint8Array(iv),
                    additionalData: encoder.encode('samsung-vault')
                },
                this.masterKey,
                new Uint8Array(encryptedData)
            );

            return decoder.decode(decryptedData);
        } catch (error) {
            console.error('Decryption error:', error);
            throw new Error('خطا در رمزگشایی داده');
        }
    }

    async generateHash(data) {
        try {
            const encoder = new TextEncoder();
            const dataBuffer = encoder.encode(data);
            
            const hashBuffer = await crypto.subtle.digest('SHA-256', dataBuffer);
            const hashArray = Array.from(new Uint8Array(hashBuffer));
            
            return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
        } catch (error) {
            console.error('Hash generation error:', error);
            throw new Error('خطا در تولید هش');
        }
    }

    generateRandomKey(length = 32) {
        return Array.from(crypto.getRandomValues(new Uint8Array(length)))
            .map(b => b.toString(16).padStart(2, '0'))
            .join('');
    }

    // رمزنگاری فایل
    async encryptFile(file) {
        if (!this.masterKey) {
            throw new Error('کلید اصلی تنظیم نشده است');
        }

        try {
            const arrayBuffer = await file.arrayBuffer();
            const iv = crypto.getRandomValues(new Uint8Array(12));
            
            const encryptedData = await crypto.subtle.encrypt(
                {
                    name: 'AES-GCM',
                    iv: iv,
                    additionalData: new TextEncoder().encode('samsung-vault-file')
                },
                this.masterKey,
                arrayBuffer
            );

            return {
                encryptedData: new Uint8Array(encryptedData),
                iv: Array.from(iv)
            };
        } catch (error) {
            console.error('File encryption error:', error);
            throw new Error('خطا در رمزنگاری فایل');
        }
    }

    // رمزگشایی فایل
    async decryptFile(encryptedData, iv) {
        if (!this.masterKey) {
            throw new Error('کلید اصلی تنظیم نشده است');
        }

        try {
            const decryptedData = await crypto.subtle.decrypt(
                {
                    name: 'AES-GCM',
                    iv: new Uint8Array(iv),
                    additionalData: new TextEncoder().encode('samsung-vault-file')
                },
                this.masterKey,
                encryptedData
            );

            return new Blob([decryptedData]);
        } catch (error) {
            console.error('File decryption error:', error);
            throw new Error('خطا در رمزگشایی فایل');
        }
    }
}

// ایجاد نمونه از ClientCrypto
const clientCrypto = new ClientCrypto();
```

frontend/js/vault.js

```javascript
class VaultManager {
    constructor() {
        this.baseURL = window.location.origin + '/api';
        this.currentTab = 'passwords';
        this.items = {};
        
        this.initializeEventListeners();
        this.loadInitialData();
    }

    initializeEventListeners() {
        // تب‌های اصلی
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                this.switchTab(e.currentTarget.dataset.tab);
            });
        });

        // منوی کناری
        document.querySelectorAll('.sidebar-menu').forEach(menu => {
            menu.addEventListener('click', (e) => {
                this.handleSidebarMenu(e.currentTarget.dataset.action);
            });
        });

        // دکمه‌های افزودن
        document.getElementById('addPasswordBtn').addEventListener('click', () => {
            this.showAddPasswordModal();
        });
        
        document.getElementById('addNoteBtn').addEventListener('click', () => {
            this.showAddNoteModal();
        });
        
        document.getElementById('addCardBtn').addEventListener('click', () => {
            this.showAddCardModal();
        });
        
        document.getElementById('uploadFileBtn').addEventListener('click', () => {
            document.getElementById('fileUpload').click();
        });

        // آپلود فایل
        document.getElementById('fileUpload').addEventListener('change', (e) => {
            this.handleFileUpload(e.target.files);
        });

        // بستن مودال
        document.querySelector('.modal-close').addEventListener('click', () => {
            this.hideModal();
        });

        document.getElementById('modalOverlay').addEventListener('click', (e) => {
            if (e.target === e.currentTarget) {
                this.hideModal();
            }
        });
    }

    async loadInitialData() {
        if (!authManager.isLoggedIn()) return;

        try {
            await this.loadItems('passwords');
            await this.loadItems('files');
            await this.loadItems('notes');
            await this.loadItems('cards');
        } catch (error) {
            console.error('Error loading initial data:', error);
            authManager.showNotification('خطا در بارگذاری داده‌ها', 'error');
        }
    }

    switchTab(tabName) {
        // غیرفعال کردن همه تب‌ها
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        document.querySelectorAll('.tab-content').forEach(content => {
            content.classList.remove('active');
        });

        // فعال کردن تب انتخاب شده
        document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');
        document.getElementById(`${tabName}Tab`).classList.add('active');
        
        this.currentTab = tabName;
        
        // بارگذاری آیتم‌های تب جاری اگر وجود ندارند
        if (!this.items[tabName] || this.items[tabName].length === 0) {
            this.loadItems(tabName);
        }
    }

    async loadItems(type) {
        try {
            const response = await fetch(`${this.baseURL}/vault/items?type=${type}`, {
                headers: authManager.getHeaders()
            });

            if (!response.ok) {
                throw new Error('خطا در دریافت داده‌ها');
            }

            const data = await response.json();
            this.items[type] = data.items;
            this.renderItems(type, data.items);
            
        } catch (error) {
            console.error(`Error loading ${type}:`, error);
            authManager.showNotification(`خطا در بارگذاری ${type}`, 'error');
        }
    }

    renderItems(type, items) {
        const container = document.getElementById(`${type}List`);
        
        if (!items || items.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <p>هیچ ${this.getTypeName(type)}ی یافت نشد</p>
                    <button class="btn-primary" onclick="vaultManager.showAdd${this.capitalize(type)}Modal()">
                        افزودن ${this.getTypeName(type)}
                    </button>
                </div>
            `;
            return;
        }

        container.innerHTML = items.map(item => this.createItemCard(item, type)).join('');
    }

    createItemCard(item, type) {
        return `
            <div class="item-card" data-id="${item._id}">
                <div class="item-header">
                    <div class="item-title">${this.escapeHtml(item.title)}</div>
                    <div class="item-actions">
                        <button class="btn-icon" onclick="vaultManager.viewItem('${item._id}', '${type}')" title="مشاهده">
                            👁️
                        </button>
                        <button class="btn-icon" onclick="vaultManager.editItem('${item._id}', '${type}')" title="ویرایش">
                            ✏️
                        </button>
                        <button class="btn-icon" onclick="vaultManager.deleteItem('${item._id}', '${type}')" title="حذف">
                            🗑️
                        </button>
                        <button class="btn-icon" onclick="vaultManager.toggleFavorite('${item._id}', '${type}')" title="${item.favorite ? 'حذف از علاقه‌مندی‌ها' : 'افزودن به علاقه‌مندی‌ها'}">
                            ${item.favorite ? '⭐' : '☆'}
                        </button>
                    </div>
                </div>
                <div class="item-meta">
                    <span class="item-category">${this.escapeHtml(item.category)}</span>
                    <span class="item-date">${new Date(item.createdAt).toLocaleDateString('fa-IR')}</span>
                </div>
                ${item.tags && item.tags.length > 0 ? `
                    <div class="item-tags">
                        ${item.tags.map(tag => `<span class="tag">${this.escapeHtml(tag)}</span>`).join('')}
                    </div>
                ` : ''}
            </div>
        `;
    }

    getTypeName(type) {
        const names = {
            'passwords': 'رمز عبور',
            'files': 'فایل',
            'notes': 'یادداشت',
            'cards': 'کارت'
        };
        return names[type] || type;
    }

    capitalize(str) {
        return str.charAt(0).toUpperCase() + str.slice(1);
    }

    escapeHtml(unsafe) {
        return unsafe
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }

    showAddPasswordModal() {
        const modalContent = `
            <form id="addPasswordForm">
                <div class="form-group">
                    <label for="passwordTitle">عنوان</label>
                    <input type="text" id="passwordTitle" placeholder="مثلاً: ایمیل جیمیل" required>
                </div>
                <div class="form-group">
                    <label for="passwordUsername">نام کاربری</label>
                    <input type="text" id="passwordUsername" placeholder="نام کاربری یا ایمیل">
                </div>
                <div class="form-group">
                    <label for="passwordValue">رمز عبور</label>
                    <input type="password" id="passwordValue" placeholder="رمز عبور" required>
                    <button type="button" class="btn-secondary" onclick="vaultManager.generatePassword()">تولید رمز عبور</button>
                </div>
                <div class="form-group">
                    <label for="passwordUrl">آدرس وب‌سایت</label>
                    <input type="url" id="passwordUrl" placeholder="https://example.com">
                </div>
                <div class="form-group">
                    <label for="passwordCategory">دسته‌بندی</label>
                    <select id="passwordCategory">
                        <option value="general">عمومی</option>
                        <option value="social">شبکه‌های اجتماعی</option>
                        <option value="email">ایمیل</option>
                        <option value="banking">بانکی</option>
                        <option value="work">کاری</option>
                    </select>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn-secondary" onclick="vaultManager.hideModal()">لغو</button>
                    <button type="submit" class="btn-primary">ذخیره</button>
                </div>
            </form>
        `;

        this.showModal('افزودن رمز عبور جدید', modalContent);
        
        document.getElementById('addPasswordForm').addEventListener('submit', (e) => {
            e.preventDefault();
            this.saveNewPassword();
        });
    }

    generatePassword() {
        const length = 12;
        const charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*";
        let password = "";
        
        for (let i = 0; i < length; i++) {
            password += charset.charAt(Math.floor(Math.random() * charset.length));
        }
        
        document.getElementById('passwordValue').value = password;
    }

    async saveNewPassword() {
        const title = document.getElementById('passwordTitle').value;
        const username = document.getElementById('passwordUsername').value;
        const password = document.getElementById('passwordValue').value;
        const url = document.getElementById('passwordUrl').value;
        const category = document.getElementById('passwordCategory').value;

        const passwordData = {
            username,
            password,
            url
        };

        try {
            // رمزنگاری داده‌ها
            const encryptedData = await clientCrypto.encryptData(JSON.stringify(passwordData));
            
            const response = await fetch(`${this.baseURL}/vault/items`, {
                method: 'POST',
                headers: {
                    ...authManager.getHeaders(),
                    'x-master-key': await this.getMasterKeyForRequest()
                },
                body: JSON.stringify({
                    type: 'password',
                    title,
                    data: encryptedData,
                    category
                })
            });

            if (!response.ok) {
                throw new Error('خطا در ذخیره رمز عبور');
            }

            authManager.showNotification('رمز عبور با موفقیت ذخیره شد', 'success');
            this.hideModal();
            this.loadItems('passwords');
            
        } catch (error) {
            console.error('Error saving password:', error);
            authManager.showNotification('خطا در ذخیره رمز عبور', 'error');
        }
    }

    async getMasterKeyForRequest() {
        // در اینجا باید کلید اصلی را از storage یا از کاربر بگیریم
        // این یک پیاده‌سازی ساده است
        return 'default-master-key-hex-representation';
    }

    showAddNoteModal() {
        const modalContent = `
            <form id="addNoteForm">
                <div class="form-group">
                    <label for="noteTitle">عنوان</label>
                    <input type="text" id="noteTitle" placeholder="عنوان یادداشت" required>
                </div>
                <div class="form-group">
                    <label for="noteContent">محتوا</label>
                    <textarea id="noteContent" rows="6" placeholder="متن یادداشت شما..." required></textarea>
                </div>
                <div class="form-group">
                    <label for="noteCategory">دسته‌بندی</label>
                    <select id="noteCategory">
                        <option value="general">عمومی</option>
                        <option value="personal">شخصی</option>
                        <option value="work">کاری</option>
                        <option value="ideas">ایده‌ها</option>
                    </select>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn-secondary" onclick="vaultManager.hideModal()">لغو</button>
                    <button type="submit" class="btn-primary">ذخیره</button>
                </div>
            </form>
        `;

        this.showModal('افزودن یادداشت جدید', modalContent);
        
        document.getElementById('addNoteForm').addEventListener('submit', (e) => {
            e.preventDefault();
            this.saveNewNote();
        });
    }

    async saveNewNote() {
        const title = document.getElementById('noteTitle').value;
        const content = document.getElementById('noteContent').value;
        const category = document.getElementById('noteCategory').value;

        const noteData = {
            content
        };

        try {
            const encryptedData = await clientCrypto.encryptData(JSON.stringify(noteData));
            
            const response = await fetch(`${this.baseURL}/vault/items`, {
                method: 'POST',
                headers: {
                    ...authManager.getHeaders(),
                    'x-master-key': await this.getMasterKeyForRequest()
                },
                body: JSON.stringify({
                    type: 'note',
                    title,
                    data: encryptedData,
                    category
                })
            });

            if (!response.ok) {
                throw new Error('خطا در ذخیره یادداشت');
            }

            authManager.showNotification('یادداشت با موفقیت ذخیره شد', 'success');
            this.hideModal();
            this.loadItems('notes');
            
        } catch (error) {
            console.error('Error saving note:', error);
            authManager.showNotification('خطا در ذخیره یادداشت', 'error');
        }
    }

    showAddCardModal() {
        const modalContent = `
            <form id="addCardForm">
                <div class="form-group">
                    <label for="cardTitle">عنوان</label>
                    <input type="text" id="cardTitle" placeholder="مثلاً: کارت بانک ملی" required>
                </div>
                <div class="form-group">
                    <label for="cardNumber">شماره کارت</label>
                    <input type="text" id="cardNumber" placeholder="XXXX-XXXX-XXXX-XXXX" required>
                </div>
                <div class="form-group">
                    <label for="cardHolder">نام دارنده کارت</label>
                    <input type="text" id="cardHolder" placeholder="نام کامل" required>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="cardExpiry">تاریخ انقضا</label>
                        <input type="text" id="cardExpiry" placeholder="MM/YY" required>
                    </div>
                    <div class="form-group">
                        <label for="cardCvv">CVV2</label>
                        <input type="text" id="cardCvv" placeholder="XXX" required>
                    </div>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn-secondary" onclick="vaultManager.hideModal()">لغو</button>
                    <button type="submit" class="btn-primary">ذخیره</button>
                </div>
            </form>
        `;

        this.showModal('افزودن کارت جدید', modalContent);
        
        document.getElementById('addCardForm').addEventListener('submit', (e) => {
            e.preventDefault();
            this.saveNewCard();
        });
    }

    async saveNewCard() {
        const title = document.getElementById('cardTitle').value;
        const cardNumber = document.getElementById('cardNumber').value;
        const cardHolder = document.getElementById('cardHolder').value;
        const expiry = document.getElementById('cardExpiry').value;
        const cvv = document.getElementById('cardCvv').value;

        const cardData = {
            cardNumber,
            cardHolder,
            expiry,
            cvv
        };

        try {
            const encryptedData = await clientCrypto.encryptData(JSON.stringify(cardData));
            
            const response = await fetch(`${this.baseURL}/vault/items`, {
                method: 'POST',
                headers: {
                    ...authManager.getHeaders(),
                    'x-master-key': await this.getMasterKeyForRequest()
                },
                body: JSON.stringify({
                    type: 'card',
                    title,
                    data: encryptedData,
                    category: 'banking'
                })
            });

            if (!response.ok) {
                throw new Error('خطا در ذخیره کارت');
            }

            authManager.showNotification('کارت با موفقیت ذخیره شد', 'success');
            this.hideModal();
            this.loadItems('cards');
            
        } catch (error) {
            console.error('Error saving card:', error);
            authManager.showNotification('خطا در ذخیره کارت', 'error');
        }
    }

    async handleFileUpload(files) {
        if (!files || files.length === 0) return;

        for (let file of files) {
            await this.uploadFile(file);
        }
    }

    async uploadFile(file) {
        try {
            // رمزنگاری فایل
            const encryptedFile = await clientCrypto.encryptFile(file);
            
            const formData = new FormData();
            formData.append('file', new Blob([encryptedFile.encryptedData]), file.name);
            formData.append('title', file.name);
            formData.append('category', 'files');

            const response = await fetch(`${this.baseURL}/files/upload`, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${authManager.token}`,
                    'x-master-key': await this.getMasterKeyForRequest(),
                    'x-file-iv': JSON.stringify(encryptedFile.iv)
                },
                body: formData
            });

            if (!response.ok) {
                throw new Error('خطا در آپلود فایل');
            }

            authManager.showNotification(`فایل "${file.name}" با موفقیت آپلود شد`, 'success');
            this.loadItems('files');
            
        } catch (error) {
            console.error('Error uploading file:', error);
            authManager.showNotification('خطا در آپلود فایل', 'error');
        }
    }

    async viewItem(itemId, type) {
        try {
            const response = await fetch(`${this.baseURL}/vault/items/${itemId}`, {
                headers: authManager.getHeaders()
            });

            if (!response.ok) {
                throw new Error('خطا در دریافت آیتم');
            }

            const data = await response.json();
            this.showItemDetails(data.item, type);
            
        } catch (error) {
            console.error('Error viewing item:', error);
            authManager.showNotification('خطا در مشاهده آیتم', 'error');
        }
    }

    showItemDetails(item, type) {
        // این تابع باید جزئیات آیتم را در مودال نمایش دهد
        // پیاده‌سازی کامل نیاز به رمزگشایی داده‌ها دارد
        const modalContent = `
            <div class="item-details">
                <h4>${this.escapeHtml(item.title)}</h4>
                <p><strong>نوع:</strong> ${this.getTypeName(type)}</p>
                <p><strong>دسته‌بندی:</strong> ${this.escapeHtml(item.category)}</p>
                <p><strong>تاریخ ایجاد:</strong> ${new Date(item.createdAt).toLocaleDateString('fa-IR')}</p>
                ${item.tags && item.tags.length > 0 ? `
                    <p><strong>برچسب‌ها:</strong> ${item.tags.map(tag => this.escapeHtml(tag)).join(', ')}</p>
                ` : ''}
                <div class="detail-actions">
                    <button class="btn-secondary" onclick="vaultManager.hideModal()">بستن</button>
                    <button class="btn-primary" onclick="vaultManager.editItem('${item._id}', '${type}')">ویرایش</button>
                </div>
            </div>
        `;

        this.showModal('جزئیات آیتم', modalContent);
    }

    async editItem(itemId, type) {
        // پیاده‌سازی ویرایش آیتم
        authManager.showNotification('قابلیت ویرایش به زودی اضافه خواهد شد', 'info');
    }

    async deleteItem(itemId, type) {
        if (!confirm('آیا از حذف این آیتم اطمینان دارید؟')) {
            return;
        }

        try {
            const response = await fetch(`${this.baseURL}/vault/items/${itemId}`, {
                method: 'DELETE',
                headers: authManager.getHeaders()
            });

            if (!response.ok) {
                throw new Error('خطا در حذف آیتم');
            }

            authManager.showNotification('آیتم با موفقیت حذف شد', 'success');
            this.loadItems(type);
            
        } catch (error) {
            console.error('Error deleting item:', error);
            authManager.showNotification('خطا در حذف آیتم', 'error');
        }
    }

    async toggleFavorite(itemId, type) {
        try {
            const response = await fetch(`${this.baseURL}/vault/items/${itemId}`, {
                method: 'PUT',
                headers: authManager.getHeaders(),
                body: JSON.stringify({
                    favorite: true // این باید وضعیت فعلی را تغییر دهد
                })
            });

            if (!response.ok) {
                throw new Error('خطا در تغییر وضعیت علاقه‌مندی');
            }

            authManager.showNotification('وضعیت علاقه‌مندی تغییر کرد', 'success');
            this.loadItems(type);
            
        } catch (error) {
            console.error('Error toggling favorite:', error);
            authManager.showNotification('خطا در تغییر وضعیت علاقه‌مندی', 'error');
        }
    }

    handleSidebarMenu(action) {
        switch (action) {
            case 'search':
                this.showSearchModal();
                break;
            case 'favorites':
                this.showFavorites();
                break;
            case 'settings':
                this.showSettings();
                break;
        }
    }

    showSearchModal() {
        const modalContent = `
            <div class="search-modal">
                <div class="form-group">
                    <input type="text" id="searchInput" placeholder="جستجو در تمام آیتم‌ها..." autofocus>
                </div>
                <div id="searchResults" class="search-results"></div>
            </div>
        `;

        this.showModal('جستجو', modalContent);
        
        document.getElementById('searchInput').addEventListener('input', (e) => {
            this.performSearch(e.target.value);
        });
    }

    async performSearch(query) {
        if (!query || query.length < 2) {
            document.getElementById('searchResults').innerHTML = '';
            return;
        }

        try {
            const response = await fetch(`${this.baseURL}/vault/search?q=${encodeURIComponent(query)}`, {
                headers: authManager.getHeaders()
            });

            if (!response.ok) {
                throw new Error('خطا در جستجو');
            }

            const data = await response.json();
            this.displaySearchResults(data.items);
            
        } catch (error) {
            console.error('Search error:', error);
        }
    }

    displaySearchResults(items) {
        const container = document.getElementById('searchResults');
        
        if (!items || items.length === 0) {
            container.innerHTML = '<p class="no-results">نتیجه‌ای یافت نشد</p>';
            return;
        }

        container.innerHTML = items.map(item => `
            <div class="search-result-item" onclick="vaultManager.viewItem('${item._id}', '${item.type}')">
                <div class="result-title">${this.escapeHtml(item.title)}</div>
                <div class="result-type">${this.getTypeName(item.type)}</div>
            </div>
        `).join('');
    }

    showFavorites() {
        // نمایش آیتم‌های مورد علاقه
        this.switchTab('passwords'); // موقت
        authManager.showNotification('نمایش مورد علاقه‌ها به زودی اضافه خواهد شد', 'info');
    }

    showSettings() {
        const modalContent = `
            <div class="settings-modal">
                <h4>تنظیمات امنیتی</h4>
                <div class="setting-item">
                    <label>تغییر رمز عبور</label>
                    <button class="btn-secondary" onclick="vaultManager.showChangePasswordModal()">تغییر رمز عبور</button>
                </div>
                <div class="setting-item">
                    <label>خروج از تمام دستگاه‌ها</label>
                    <button class="btn-secondary" onclick="vaultManager.logoutAllDevices()">خروج از همه جا</button>
                </div>
                <div class="setting-item">
                    <label>پشتیبان‌گیری</label>
                    <button class="btn-secondary" onclick="vaultManager.backupData()">دریافت پشتیبان</button>
                </div>
            </div>
        `;

        this.showModal('تنظیمات', modalContent);
    }

    showChangePasswordModal() {
        // پیاده‌سازی تغییر رمز عبور
        authManager.showNotification('قابلیت تغییر رمز عبور به زودی اضافه خواهد شد', 'info');
    }

    logoutAllDevices() {
        // پیاده‌سازی خروج از تمام دستگاه‌ها
        authManager.showNotification('قابلیت خروج از تمام دستگاه‌ها به زودی اضافه خواهد شد', 'info');
    }

    backupData() {
        // پیاده‌سازی پشتیبان‌گیری
        authManager.showNotification('قابلیت پشتیبان‌گیری به زودی اضافه خواهد شد', 'info');
    }

    showModal(title, content) {
        document.getElementById('modalTitle').textContent = title;
        document.getElementById('modalBody').innerHTML = content;
        document.getElementById('modalOverlay').classList.add('active');
    }

    hideModal() {
        document.getElementById('modalOverlay').classList.remove('active');
    }
}

// ایجاد نمونه از VaultManager بعد از لاود صفحه
let vaultManager;
document.addEventListener('DOMContentLoaded', () => {
    vaultManager = new VaultManager();
});
```

frontend/js/app.js

```javascript
// فایل اصلی برنامه - مدیریت کلی برنامه

class App {
    constructor() {
        this.authManager = authManager;
        this.vaultManager = vaultManager;
        this.crypto = clientCrypto;
        
        this.initializeApp();
    }

    initializeApp() {
        console.log('🚀 Samsung Vault Web Application Initialized');
        
        // بررسی وضعیت آنلاین/آفلاین
        window.addEventListener('online', this.handleOnlineStatus.bind(this));
        window.addEventListener('offline', this.handleOfflineStatus.bind(this));
        
        // مدیریت خطاهای全局
        window.addEventListener('error', this.handleGlobalError.bind(this));
        
        // نمایش نسخه برنامه
        this.showAppVersion();
    }

    handleOnlineStatus() {
        this.authManager.showNotification('اتصال اینترنت برقرار شد', 'success');
        // همگام‌سازی داده‌ها در صورت نیاز
    }

    handleOfflineStatus() {
        this.authManager.showNotification('اتصال اینترنت قطع شد', 'error');
    }

    handleGlobalError(event) {
        console.error('Global error:', event.error);
        // می‌توانید خطاها را به سرویس مانیتورینگ گزارش دهید
    }

    showAppVersion() {
        const version = '1.0.0';
        console.log(`🔒 Samsung Vault v${version}`);
        
        // می‌توانید نسخه را در رابط کاربری نمایش دهید
        // document.getElementById('appVersion').textContent = `v${version}`;
    }

    // متدهای کمکی全局
    formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    formatDate(date) {
        return new Date(date).toLocaleDateString('fa-IR', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
    }

    // مدیریت session
    setupSessionManagement() {
        // بررسی اتوماتیک وضعیت session
        setInterval(() => {
            this.authManager.verifyToken().then(valid => {
                if (!valid) {
                    this.authManager.showNotification('Session expired. Please login again.', 'error');
                    this.authManager.logout();
                }
            });
        }, 5 * 60 * 1000); // هر 5 دقیقه
    }
}

// راه‌اندازی برنامه وقتی DOM آماده شد
document.addEventListener('DOMContentLoaded', () => {
    window.app = new App();
});

// متدهای全局 برای دسترسی از HTML
window.copyToClipboard = async (text) => {
    try {
        await navigator.clipboard.writeText(text);
        authManager.showNotification('متن کپی شد', 'success');
    } catch (err) {
        console.error('Failed to copy text: ', err);
        authManager.showNotification('خطا در کپی کردن متن', 'error');
    }
};

window.generateStrongPassword = () => {
    const length = 16;
    const charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=[]{}|;:,.<>?";
    let password = "";
    
    // اطمینان از وجود حداقل یک کاراکتر از هر دسته
    password += "ABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(Math.random() * 26));
    password += "abcdefghijklmnopqrstuvwxyz".charAt(Math.floor(Math.random() * 26));
    password += "0123456789".charAt(Math.floor(Math.random() * 10));
    password += "!@#$%^&*()_+-=[]{}|;:,.<>?".charAt(Math.floor(Math.random() * 24));
    
    // تکمیل بقیه کاراکترها
    for (let i = password.length; i < length; i++) {
        password += charset.charAt(Math.floor(Math.random() * charset.length));
    }
    
    // به هم زدن ترتیب کاراکترها
    password = password.split('').sort(() => 0.5 - Math.random()).join('');
    
    return password;
};
```

4. فایل‌های راهنما و پیکربندی

README.md

```markdown
# سامسونگ ولت - Samsung Vault

یک برنامه وب امن برای ذخیره و مدیریت اطلاعات حساس

## 🚀 ویژگی‌ها

- 🔐 احراز هویت امن با JWT
- 🔒 رمزنگاری end-to-end با AES-256-GCM
- 📱 رابط کاربری ریسپانسیو و فارسی
- 💾 پشتیبانی از انواع داده‌ها (رمز عبور، فایل، یادداشت، کارت)
- 🔍 جستجوی پیشرفته
- ⭐ سیستم علاقه‌مندی‌ها

## 🛠️ نصب و راه‌اندازی

### پیش‌نیازها

- Node.js 16+
- MongoDB 4.4+
- npm یا yarn

### نصب

1. کلون کردن پروژه:
```bash
git clone [repository-url]
cd samsung-vault-web
```

1. نصب dependencies:

```bash
npm install
```

1. تنظیم فایل محیط:

```bash
cp .env.example .env
# ویرایش فایل .env با مقادیر مناسب
```

1. راه‌اندازی دیتابیس:

```bash
# اطمینان از اجرای MongoDB
mongod
```

1. اجرای برنامه:

```bash
# توسعه
npm run dev

# تولید
npm start
```

1. باز کردن مرورگر:

```
http://localhost:3000
```

📁 ساختار پروژه

```
samsung-vault-web/
├── backend/          # سرور Node.js
├── frontend/         # کلاینت وب
├── package.json
└── README.md
```

🔧 API Endpoints

احراز هویت

· POST /api/auth/register - ثبت نام
· POST /api/auth/login - ورود
· GET /api/auth/verify - بررسی توکن

مدیریت داده‌ها

· GET /api/vault/items - دریافت آیتم‌ها
· POST /api/vault/items - افزودن آیتم
· PUT /api/vault/items/:id - ویرایش آیتم
· DELETE /api/vault/items/:id - حذف آیتم
· GET /api/vault/search - جستجو

فایل‌ها

· POST /api/files/upload - آپلود فایل
· GET /api/files/download/:id - دریافت فایل

🔒 امنیت

· رمزنگاری end-to-end
· هش کردن رمزهای عبور با bcrypt
· توکن‌های JWT با تاریخ انقضا
· محدودیت نرخ درخواست
· هدرهای امنیتی Helmet

📄 مجوز

این پروژه تحت مجوز MIT منتشر شده است.

```

#### `.gitignore`
```gitignore
# dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# logs
logs
*.log

# runtime data
pids
*.pid
*.seed
*.pid.lock

# coverage directory used by tools like istanbul
coverage/

# nyc test coverage
.nyc_output

# dependency directories
node_modules/

# optional npm cache directory
.npm

# optional REPL history
.node_repl_history

# output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env

# next.js build output
.next

# database
*.db
*.sqlite

# backup files
*.backup
*.bak

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# temporary files
*.tmp
*.temp

# uploads
uploads/
```

🚀 دستورات راه‌اندازی

1. نصب و اجرا:

```bash
# نصب dependencies
npm install

# راه‌اندازی دیتابیس MongoDB (در ترمینال جدید)
mongod

# اجرای برنامه (در ترمینال اصلی)
npm run dev
```

2. دسترسی به برنامه:

باز کردن مرورگر و رفتن به آدرس:

```
http://localhost:3000
```

این کد کامل و آماده اجرا شامل تمام بخش‌های ضروری برای یک سیستم ولت امن شبیه سامسونگ است! 🎉

نیاز به توضیح